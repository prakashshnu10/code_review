type ResponseBodyTypes = Record<string, unknown> | Record<string, unknown>[] | ReadableStream | Blob | string | string[] | number | void | null;
interface FormattedResponse<T extends ResponseBodyTypes = ResponseBodyTypes> {
    body: T;
    headers: Record<string, string>;
    status: number;
}
interface Constructable<T = any> {
    new (...args: any[]): T;
}
type DefaultResourceOptions = {
    headers: {
        [header: string]: string;
    };
    authHeaders: {
        [authHeader: string]: () => Promise<string>;
    };
    url: string;
    rejectUnauthorized: boolean;
};
type DefaultRequestOptions = {
    body?: FormData | Record<string, unknown>;
    searchParams?: Record<string, unknown>;
    sudo?: string | number;
    method?: string;
    asStream?: boolean;
    signal?: AbortSignal;
};
type RequestOptions = {
    headers: Record<string, string>;
    timeout?: number;
    method: string;
    searchParams?: string;
    prefixUrl: string;
    body?: string | FormData;
    asStream?: boolean;
    signal?: AbortSignal;
};
interface RequesterType {
    get<T extends ResponseBodyTypes>(endpoint: string, options?: DefaultRequestOptions): Promise<FormattedResponse<T>>;
    post<T extends ResponseBodyTypes>(endpoint: string, options?: DefaultRequestOptions): Promise<FormattedResponse<T>>;
    put<T extends ResponseBodyTypes>(endpoint: string, options?: DefaultRequestOptions): Promise<FormattedResponse<T>>;
    patch<T extends ResponseBodyTypes>(endpoint: string, options?: DefaultRequestOptions): Promise<FormattedResponse<T>>;
    delete<T extends ResponseBodyTypes>(endpoint: string, options?: DefaultRequestOptions): Promise<FormattedResponse<T>>;
}
declare function formatQuery(params?: Record<string, unknown>): string;
type OptionsHandlerFn = (serviceOptions: DefaultResourceOptions, requestOptions: DefaultRequestOptions) => Promise<RequestOptions>;
declare function defaultOptionsHandler(resourceOptions: DefaultResourceOptions, { body, searchParams, sudo, signal, asStream, method, }?: DefaultRequestOptions): Promise<RequestOptions>;
type RequestHandlerFn<T extends ResponseBodyTypes = ResponseBodyTypes> = (endpoint: string, options?: Record<string, unknown>) => Promise<FormattedResponse<T>>;
declare function createRequesterFn(optionsHandler: OptionsHandlerFn, requestHandler: RequestHandlerFn): (serviceOptions: DefaultResourceOptions) => RequesterType;
declare function presetResourceArguments<T extends Record<string, Constructable>>(resources: T, customConfig?: Record<string, unknown>): T;

interface RootResourceOptions<C> {
    requesterFn?: (resourceOptions: DefaultResourceOptions) => RequesterType;
    host?: string;
    prefixUrl?: string;
    rejectUnauthorized?: boolean;
    camelize?: C;
    queryTimeout?: number | null;
    sudo?: string | number;
    profileToken?: string;
    profileMode?: 'execution' | 'memory';
}
type GitlabToken = string | (() => Promise<string>);
interface BaseRequestOptionsWithOAuthToken<C> extends RootResourceOptions<C> {
    oauthToken: GitlabToken;
}
interface BaseRequestOptionsWithAccessToken<C> extends RootResourceOptions<C> {
    token: GitlabToken;
}
interface BaseRequestOptionsWithJobToken<C> extends RootResourceOptions<C> {
    jobToken: GitlabToken;
}
type BaseResourceOptions<C> = BaseRequestOptionsWithOAuthToken<C> | BaseRequestOptionsWithAccessToken<C> | BaseRequestOptionsWithJobToken<C>;
declare class BaseResource<C extends boolean = false> {
    readonly url: string;
    readonly requester: RequesterType;
    readonly queryTimeout: number | null;
    readonly headers: {
        [header: string]: string;
    };
    readonly authHeaders: {
        [authHeader: string]: () => Promise<string>;
    };
    readonly camelize: C | undefined;
    readonly rejectUnauthorized: boolean;
    constructor({ sudo, profileToken, camelize, requesterFn, profileMode, host, prefixUrl, rejectUnauthorized, queryTimeout, ...tokens }: BaseResourceOptions<C>);
}

export { BaseRequestOptionsWithAccessToken, BaseRequestOptionsWithJobToken, BaseRequestOptionsWithOAuthToken, BaseResource, BaseResourceOptions, Constructable, DefaultRequestOptions, DefaultResourceOptions, FormattedResponse, GitlabToken, OptionsHandlerFn, RequestHandlerFn, RequestOptions, RequesterType, ResponseBodyTypes, RootResourceOptions, createRequesterFn, defaultOptionsHandler, formatQuery, presetResourceArguments };
